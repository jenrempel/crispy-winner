summary(model1b_All_Years)
##### Only PWS Population Size
### Model 1C NON-TRANFORMED DATA
# Create the full model.
model1c_All_Years = glm(Y_MCL_binary_All_Years ~ Total.Population, family = "binomial", data=data.frame(X_All_Years))
# View the full model summary results.
summary(model1c_All_Years)
##### Only Owner Type
### Model 1D NON-TRANFORMED DATA
# Create the full model.
model1d_All_Years = glm(Y_MCL_binary_All_Years ~ Owner.Type.Jenny, family = "binomial", data=data.frame(X_All_Years))
# View the full model summary results.
summary(model1d_All_Years)
# Probabilities - nonlogged
probabilitiesMCL_nonlogged <- predict(model1b_All_Years, type = "response")
#### For Total Population (non-logged)
X_All_Years_mydata <- X_All_Years
X_All_Years_mydata <- X_All_Years %>%
dplyr::select_if(is.integer)
predictors <- colnames(X_All_Years_mydata)
# Bind the logit and tidy the data for the plot
X_All_Years_mydata <- X_All_Years_mydata %>%
mutate(logit = log(probabilitiesMCL_nonlogged/(1-probabilitiesMCL_nonlogged))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
# png("Scatter Plot Testing Linearity Assumption.png", height=6, width=6, units="in", res=300)
ggplot(X_All_Years_mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
axis.text.y = element_text(angle = 0, hjust = 0.5, size = 8) +
facet_wrap(~predictors, scales = "free_y")
ggplot(X_All_Years_mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
ylab = "Total Population" +
xlab = "Logit of Outcome Variable (MCL Violation)" +
ggtitle = "Scatter Plot of the Relationship Between the Logit of the Outcome Variable and Total Population" +
facet_wrap(~predictors, scales = "free_y")
ggplot(X_All_Years_mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
png("Scatter Plot Testing Linearity Assumption.png", height=6, width=6, units="in", res=300)
ggplot(X_All_Years_mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
car::vif(model1b_All_Years)
ggplot(model1b_All_Years_data, aes(index, .std.resid)) +
geom_point(aes(color = Y_MCL_binary_All_Years), alpha = .5) +
theme_bw()
model1b_All_Years_data <- augment(model1b_All_Years) %>% mutate(index = 1:n())
# Calculate data for top 3 largest values
model1b_All_Years_data %>% top_n(3, .cooksd)
ggplot(model1b_All_Years_data, aes(index, .std.resid)) +
geom_point(aes(color = Y_MCL_binary_All_Years), alpha = .5) +
theme_bw()
ggplot(model1b_All_Years_data, aes(index, .std.resid)) +
geom_point(aes(color = Y_MCL_binary_All_Years), alpha = .5) +
theme_bw() +
guides(fill = FALSE)
ggplot(model1b_All_Years_data, aes(index, .std.resid)) +
geom_point(aes(color = Y_MCL_binary_All_Years), alpha = .5) +
theme_bw() +
guides(fill = TRUE)
png("Standardized Residuals.png", height=6, width=6, units="in", res=300)
ggplot(model1b_All_Years_data, aes(index, .std.resid)) +
geom_point(aes(color = Y_MCL_binary_All_Years), alpha = .5) +
theme_bw()
ggplot(data=AllPWS_NoNP, aes(x = AllPWS_NoNP$Total.Population)) + geom_histogram(binwidth = 200)
boxplot(AllPWS_NoNP$Logged.Total.Population,data=AllPWS_NoNP, main="Population Size Log Transformed", xlab = "All Public Water Systems", ylab = "Log Base 2 of the Population Served by Each Public Water System")
ggplot(data=AllPWS_NoNP, aes(x = AllPWS_NoNP$Logged.Total.Population)) + geom_histogram(binwidth = 1)
boxplot(AllPWS_NoNP$Logged.Total.Population,data=AllPWS_NoNP, main="Population Size Log Transformed", xlab = "All Public Water Systems", ylab = "Log Base 2 of the Population Served by Each Public Water System")
ids2 = c(seq(1,nrow(AllPWS_NoNP))[AllPWS_NoNP[,18]>3300])
AllPWS_NoNP_ids2 = AllPWS_NoNP[-ids2,]
ids2 = c(seq(1,nrow(AllPWS_NoNP))[AllPWS_NoNP[,18]>3300])
AllPWS_NoNP_ids2 = AllPWS_NoNP[-ids2,]
View(AllPWS_NoNP)
View(AllPWS_NoNP)
# Create an initial boxplot with all data
# Try removing ~1/8 of the data as outliers
ids1 = c(seq(1,nrow(AllPWS_NoNP))[AllPWS_NoNP[,19]>2000])
AllPWS_NoNP_ids1 = AllPWS_NoNP[-ids1,]
boxplot(AllPWS_NoNP_ids1$Total.Population,data=AllPWS_NoNP_ids1, main="Population Size Data (Excluding 884 Systems with Populations >2000 People)", xlab = "All Public Water Systems", ylab = "Population Served by Each Public Water System")
ids2 = c(seq(1,nrow(AllPWS_NoNP))[AllPWS_NoNP[,19]>3300])
AllPWS_NoNP_ids2 = AllPWS_NoNP[-ids2,]
ggplot(data=AllPWS_NoNP_ids2, aes(x = AllPWS_NoNP_ids2$Total.Population)) + geom_histogram(binwidth = 200)
ggplot(data=AllPWS_NoNP_ids2, aes(x = AllPWS_NoNP_ids2$Logged.Total.Population)) + geom_histogram(binwidth = 200)
1-exp(-1.424e-05)
exp(-1.424e-05)
1-.9999858
exp(-1.424e-05)
1-(exp(-1.424e-05))
1-(1-(exp(-1.424e-05)))^10000
1.42399e-05^10000
0.00119^100000
1-0.00119^10000
1-0.0000119^10000
1-0.9999858^10000
exp(-1.424e-05)
1-(exp(-1.424e-05))^10000
(exp^-1.437e-05)
exp(-1.437e-05)
1-(exp(-1.437e-05))^10000
7,281-1,789
7281-1789
5492/7281
exp(-1.372e+00)
exp(-3.934e-01)
exp(-5.604e-01)
exp(-1.437e-05)
1-0.5709
1-.6747
n_fit = nrow(X_All_Years)
yb.hat = rep(0,n)
yb.hat = rep(0,n_fit)
yb.hat[fitted(model1b_All_Years) > 0.5] = 1
sum(Y != yb.hat) / length(Y)
sum(Y_MCL_binary_All_Years != yb.hat) / length(Y)
sum(Y_MCL_binary_All_Years != yb.hat) / length(Y_MCL_binary_All_Years)
exp(-1.372e+00)
exp(-1.437e-05)
exp(-1.372e+00)
exp(-3.934e-01)
exp(-5.604e-01)
6125+109+1047
2891+1443+2947
print(1:10)
setwd("~/Desktop/r-novice-inflammation")
getwd()
read.csv(file = "data/inflammation-01/csv")
read.csv(file = "data/inflammation-01.csv")
read.csv(file = "data/inflammation-01.csv", header = TRUE)
read.csv(file = "data/inflammation-01.csv", header = FALSE)
read.csv(file = "data/inflammation-01.csv", header = TRUE)
# intro to variables, types, etc.
weight_kg <- 55
weight_kg
weight_lb <- weight_kg * 2.2
weight_lb
class(weight_lb)
this_string <- "this is a string"
this_string
class(this_string)
# variables, data, types
dat <- read.csv(file = "data/inflammation-01.csv", header = FALSE)
View(dat)
dat <- read.csv("data/inflammation-01.csv", FALSE)
View(dat)
head(dat)
head(dat, n=10)
class(dat)
dim(dat)
dat[1,1]
dat[c(1,2,5), c(7,8,9)]
dat[c(1,2,5), c(7:9)]
dat[1,]
dat[,c(1,2)]
1:8
dat[1:8,]
dat[c(1,2,5),7:9] # This returns the data from rows 1, 2, and 5, in columns 7-9.
# functions for summarizing data
patient_10 <- dat[10,]
min(patient_10)
patient_10
max(patient_10)
class(patient_10)
mean(as.numeric(patient)10))
mean(as.numeric(patient_10))
?apply
# apply(x,MARGIN,FUN) x=data(must be matrix), MARGIN = vector
apply(dat, 1, mean) # So this applies mean across every row in the data frame
# exercise: use apply to summarize dat with functions min, max, and sd
apply(dat, 1, min)
apply(dat, 1, max)
apply(dat, 1, sd)
apply(dat, 2, min)
apply(dat, 2, max)
apply(dat, 2, sd)
# exercise: use apply to summarize dat with functions min, max, and sd
row_mins <- apply(dat, 1, min)
# exercise: use apply to summarize dat with functions min, max, and sd
row_mins <- apply(dat, 1, min); row_mins
# exercise: use apply to summarize dat with functions min, max, and sd
row_mins <- apply(dat, 1, min); row_mins
row_maxs <- apply(dat, 1, max)
row_sds <- apply(dat, 1, sd)
col_mins <- apply(dat, 2, min)
col_maxs <- apply(dat, 2, max)
col_sds <- apply(dat, 2, sd)
class(col_sds)
class(row_sds)
summary(dat)
summary(dat[4:6, 1])
dat[4:6, 1]
# plotting
plot(row_max)
# plotting
plot(row_maxs)
plot(row_max, type = "l")
plot(row_maxs, type = "l")
col_means <- apply(dat,2,mean)
plot(col_means[1:10])
plot(col_means[1:10], x-axis="Patient")
plot(col_means[1:10],)
row_means <- apply(dat,1,mean)
plot(row_means[1:10],)
col_means_exercise <- apply(dat[1:10,],2,mean)
plot(col_means_exercise)
plot(col_means_exercise, type = "l")
plot(apply(dat[1:10, ], 2, mean), type ] "l",
ylab = "mean", xlab = "days",
title = "Mean Inflammation Across Days")
plot(apply(dat[1:10,], 2, mean), type = "l",
ylab = "mean", xlab = "days",
title = "Mean Inflammation Across Days")
plot(apply(dat[1:10,], 2, mean), type = "l",
ylab = "mean", xlab = "days",
main = "Mean Inflammation Across Days")
plot(apply(dat[1:10,], 2, mean), type = "l",
ylab = "mean", xlab = "days",
main = "Mean Inflammation Across Days")
warnings()
plot(apply(dat[1:10,], 2, mean), type = "l",
ylab = "mean", xlab = "days",
main = "Mean Inflammation Across Days")
## writing functions
# to define a function, we do {} brackets. everything bw those brackets is the function.
# What's before{} is the data the function will be applied to.
fahrenheit_to_kelvin <- function(temp_F) {
temp_K <- (temp_F - 32) * (5/9) + 237.15
}
fahrenheit_to_kelvin(51)
fahrenheit_to_kelvin <- function(temp_F) {
temp_K <- (temp_F - 32) * (5/9) + 237.15
return(temp_K)
}
fahrenheit_to_kelvin(51)
temp_K <- (temp_F - 32) * (5/9) + 273.15
fahrenheit_to_kelvin(51)
fahrenheit_to_kelvin <- function(temp_F) {
temp_K <- (temp_F - 32) * (5/9) + 273.15
return(temp_K)
}
fahrenheit_to_kelvin(51)
divide_by_input <- function(input) {
input / 5
}
divide_by_input(5)
# The next example will similarly take in a temp in F and convert it to C.
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * (5/9)
return(temp_C)
}
fahrenheit_to_celsius(51)
fahrenheit_to_celsius(32)
fahrenheit_to_celsius(100)
fahrenheit_to_celsius(75)
fahrenheit_to_celsius_v2 <- function(temp_F) {
temp_C <- fahrenheit_to_kelvin(temp_F) - 273.15
return(temp_C)
}
fahrenheit_to_celsius_v2(51)
# check outputs match
all.equal(fahrenheit_to_celsius(51),
fahrenheit_to_celsius_v2(50))
min_max_function <- function(numeric_vector_input) {
temp_data <- sum(min(numeric_vector_input)+max(numeric_vector_input))
return(temp_data)
}
sample_stuff <- as.numeric(c(1:10))
min_max_function(sample_stuff)
class(sample_stuff)
sample_stuff_2 <- 1:10
sample_stuff_2 <- as.numeric(sample_stuff_2)
class(sample_stuff_2)
# Alternative Solution
min_max_function_2 <- function(numeric_vector_input) {
min_vector <- min(numeric_vector_input)
max_vector <- max(numeric_vector_input)
sum_of_both <- sum(min_vector, max_vector)
return(sum_of_both)
}
min_max_function <- function(numeric_vector_input) {
temporary_data <- sum(min(numeric_vector_input)+max(numeric_vector_input))
return(temporary_data)
}
fahrenheit_conversion_v3 <- function(temp_F,
to) {
# What to do if asking for celsius conversion
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
# What to do if otherwise
} else {
temp_out <- fahrenheit_to_kelvin(temp_K)
return(temp_out)
}
}
## Version 1
fahrenheit_conversion <- function(temp_F,
to) {
# What to do if asking for celsius conversion
if (to == "celsius") {
temp_C <- fahrenheit_to_celsius(temp_F)
temp_out <- temp_C
# What to do if otherwise
} else {
temp_K <- fahrenheit_to_kelvin(temp_K)
temp_out <- temp_K
}
return(temp_out)
}
## Version 2
fahrenheit_conversion_v2 <- function(temp_F,
to) {
# What to do if asking for celsius conversion
if (to == "celsius") {
temp_C <- fahrenheit_to_celsius(temp_F)
return(temp_C)
# What to do if otherwise
} else {
temp_K <- fahrenheit_to_kelvin(temp_K)
return(temp_K)
}
}
## Version 3
fahrenheit_conversion_v3 <- function(temp_F,
to) {
# What to do if asking for celsius conversion
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
# What to do if otherwise
} else {
temp_out <- fahrenheit_to_kelvin(temp_K)
return(temp_out)
}
}
# Testing
converted_temperature <- fahrenheit_conversion(temp_F = 51, to = "kelvin")
## Version 1
fahrenheit_conversion <- function(temp_F,
to) {
# What to do if asking for celsius conversion
if (to == "celsius") {
temp_C <- fahrenheit_to_celsius(temp_F)
temp_out <- temp_C
# What to do if otherwise
} else {
temp_K <- fahrenheit_to_kelvin(temp_F)
temp_out <- temp_K
}
return(temp_out)
}
# Testing
converted_temperature <- fahrenheit_conversion(temp_F = 51, to = "kelvin")
# Testing
converted_temperature <- fahrenheit_conversion(temp_F = 51, to = "kelvin"); converted_temperature
converted_temperature <- fahrenheit_conversion(temp_F = 51, to = "fahrenheit"); converted_temperature
## Updated conversion model
fahrenheit_conversion_v4 <- function(temp_F,
to) {
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
return(temp_out)
} else if (to == "kelvin") {
temp_out <- fahrenheit_to_kelvin(temp_K)
return(temp_out)
} else {
message("unexpected input for argument 'to'")
}
}
converted_temperature_2 <- fahrenheit_conversion_v4(temp_F = 51, to = "kelvin")
## Updated conversion model
fahrenheit_conversion_v4 <- function(temp_F,
to) {
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
return(temp_out)
} else if (to == "kelvin") {
temp_out <- fahrenheit_to_kelvin(temp_F)
return(temp_out)
} else {
message("unexpected input for argument 'to'")
}
}
converted_temperature_2 <- fahrenheit_conversion_v4(temp_F = 51, to = "kelvin")
converted_temperature_2 <- fahrenheit_conversion_v4(temp_F = 51, to = "celsius")
converted_temperature_51kelvin <- fahrenheit_conversion_v4(temp_F = 51, to = "kelvin")
converted_temperature_51celsius <- fahrenheit_conversion_v4(temp_F = 51, to = "celsius")
converted_temperature_51kelvin <- fahrenheit_conversion_v4(temp_F = 51, to = "kelvin"); converted_temperature_51kelvin
converted_temperature_51celsius <- fahrenheit_conversion_v4(temp_F = 51, to = "celsius"); converted_temperature_51celsius
converted_temperature_51fahrenheit <- fahrenheit_conversion_v4(temp_F = 51, to = "fahrenheit"); converted_temperature_51celsius
converted_temperature_51kelvin <- fahrenheit_conversion_v4(temp_F = 51, to = "kelvin"); converted_temperature_51kelvin
converted_temperature_51fahrenheit <- fahrenheit_conversion_v4(temp_F = 51, to = "fahrenheit"); converted_temperature_51celsius
converted_temperature_51fahrenheit <- fahrenheit_conversion_v4(temp_F = 51, to = "what?"); converted_temperature_51celsius
fahrenheit_conversion_v4 <- function(temp_F,
to) {
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
return(temp_out)
} else if (to == "kelvin") {
temp_out <- fahrenheit_to_kelvin(temp_F)
return(temp_out)
} else {
message("unexpected input for argument 'to'")
}
}
converted_temperature_51fahrenheit <- fahrenheit_conversion_v4(temp_F = 51, to = "what?"); converted_temperature_51celsius
converted_temperature_51fahrenheit <- fahrenheit_conversion_v4(temp_F = 51, to = "what?"); converted_temperature_51fahrenheit
}
## Updated conversion model
fahrenheit_conversion_v4 <- function(temp_F,
to = "celsius") {
# check class of temp_F
stopifnot(class(temp_F) == "numeric")
stopifnot(class(to) == "character")
# what to do if asking for celsius conversion
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
return(temp_out)
# what to do if kelvin
} else if (to == "kelvin") {
temp_out <- fahrenheit_to_kelvin(temp_F)
return(temp_out)
# what to do if otherwise
} else {
message("unexpected input for argument 'to'")
}
}
fahrenheit_conversion_v4(50)
fahrenheit_conversion_v4(50:90)
## EXERCISE: In the case that our new function
#           converted_temperature() has a sensible input to argument 'to', create a plot of the
#           converted temperature as output
input_temperature <- 50:90
fahrenheit_conversion_v4(input_temperature)
plot_input_data <- repeat{
print(fahrenheit_conversion_v4(x))
x = x+1
if (x == 91){
break
}
}
x <- 50
plot_input_data <- repeat{
print(fahrenheit_conversion_v4(x))
x = x+1
if (x == 91){
break
}
}
## EXERCISE: In the case that our new function
#           converted_temperature() has a sensible input to argument 'to', create a plot of the
#           converted temperature as output
input_temperature <- 50:90
draft_plot_output <- apply(input_temperature, 1, fahrenheit_conversion_v4)
draft_plot_output <- apply(input_temperature, 2, fahrenheit_conversion_v4)
## Trying again
input_temperature
fahrenheit_converstion(input_temperature)
fahrenheit_converstion_v4(input_temperature)
class(input_temperature)
## Trying again
input_temperature <- as.numeric(input_temperature)
class(input_temperature)
fahrenheit_conversion_v4(input_temperature)
plot_data <- fahrenheit_conversion_v4(input_temperature)
plot(plot_data)
## And again
fahrenheit_conversion_plot <- function(temp_F,
to = "celsius") {    # this sets the default to celsius
# check class of temp_F
stopifnot(class(temp_F) == "numeric")
stopifnot(class(to) == "character")
# what to do if asking for celsius conversion
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
plot(temp_out)
# what to do if kelvin
} else if (to == "kelvin") {
temp_out <- fahrenheit_to_kelvin(temp_F)
plot(temp_out)
# what to do if otherwise
} else {
message("unexpected input for argument 'to'")
}
}
fahrenheit_conversion_plot(input_temperature)
## And again
fahrenheit_conversion_plot <- function(temp_F,
to = "celsius") {    # this sets the default to celsius
# check class of temp_F
stopifnot(class(temp_F) == "numeric")
stopifnot(class(to) == "character")
# what to do if asking for celsius conversion
if (to == "celsius") {
temp_out <- fahrenheit_to_celsius(temp_F)
plot(temp_F, temp_out, xlab = "Temperature in F", ylab = "Converted Temperature")
# what to do if kelvin
} else if (to == "kelvin") {
temp_out <- fahrenheit_to_kelvin(temp_F)
plot(temp_F, temp_out, xlab = "Temperature in F", ylab = "Converted Temperature")
# what to do if otherwise
} else {
message("unexpected input for argument 'to'")
}
}
fahrenheit_conversion_plot(input_temperature)
